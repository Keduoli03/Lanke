---
import MainLayout from '../layouts/MainLayout.astro';

const title = 'Misskey 动态';
---
<MainLayout title={title}>
    <div class="misskey-timeline">
        <header class="archive-header">
            <h1 class="archive-title">我的动态</h1>
            <p class="archive-subtitle">点击详情可跳转到 Misskey</p>
        </header>
        
        <div id="timeline-container"
             class="timeline-container"
             data-instance="https://memo.blueke.top"
             data-user-id="adfztpsih1jc0003"
             data-limit="20"></div>
    </div>

    <script type="module">
      const absUrl = (base, p) => {
        if (!p) return '';
        try { return new URL(p, base).href; } catch { return p; }
      };

      const formatDate = (dateString) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
        const pad = (num) => num.toString().padStart(2, '0');
        if (diffDays === 0) return `今天 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
        if (diffDays === 1) return `昨天 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
        if (diffDays < 365) return `${pad(date.getMonth() + 1)}月${pad(date.getDate())}日 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
        return `${date.getFullYear()}年${pad(date.getMonth() + 1)}月${pad(date.getDate())}日`;
      };

      const getNoteDetailUrl = (instance, noteId) => `${instance}/notes/${noteId}`;

      const fetchReplies = async (instance, noteId, limit = 5) => {
        try {
          const res = await fetch(`${instance}/api/notes/children`, {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ noteId, limit })
          });
          if (!res.ok) return [];
          return await res.json();
        } catch { return []; }
      };

      const fetchQuotedNote = async (instance, noteId) => {
        try {
          const res = await fetch(`${instance}/api/notes/show`, {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ noteId })
          });
          if (!res.ok) return null;
          return await res.json();
        } catch { return null; }
      };

      const renderQuotedNote = async (instance, quotedNoteId) => {
        if (!quotedNoteId) return '';
        const quotedNote = await fetchQuotedNote(instance, quotedNoteId);
        if (!quotedNote) return '';
        const quotedUrl = getNoteDetailUrl(instance, quotedNoteId);
        const quotedTime = formatDate(quotedNote.createdAt);
        return `
          <div class="quoted-note">
            <div class="quoted-header">
              <img src="${absUrl(instance, quotedNote.user?.avatarUrl)}" class="quoted-avatar" alt="${quotedNote.user?.name || ''}的头像" loading="lazy" />
              <div class="quoted-author-info">
                <span class="quoted-author">${quotedNote.user?.name || quotedNote.user?.username || ''}</span>
                <span class="quoted-time">${quotedTime}</span>
              </div>
            </div>
            <div class="quoted-content">${quotedNote.text || '[无内容]'}</div>
            ${quotedNote.files && quotedNote.files.length > 0 ? `<div class="quoted-media"><img src="${absUrl(instance, quotedNote.files[0].url)}" alt="引用内容图片" loading="lazy" /></div>` : ''}
            <a href="${quotedUrl}" target="_blank" class="quoted-link" rel="noopener noreferrer">查看原文</a>
          </div>
        `;
      };

      const initTimeline = async () => {
        const container = document.getElementById('timeline-container');
        if (!container) return;
        if (container.dataset.init === '1') return; // 防重复
        container.dataset.init = '1';

        const MISSKEY_INSTANCE = container.dataset.instance;
        const USER_ID = container.dataset.userId;
        const LIMIT = Number(container.dataset.limit || '20');

        // 加载态改为 Tailwind
        container.innerHTML = `
          <div class="text-center py-16 text-gray-600">
            <div class="w-10 h-10 mx-auto mb-4 border-2 border-gray-200 border-t-gray-500 rounded-full animate-spin"></div>
            <p>加载中...</p>
          </div>
        `;

        try {
          // 获取用户，确认当前用户 id
          const userRes = await fetch(`${MISSKEY_INSTANCE}/api/users/show`, {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId: USER_ID })
          });
          const user = await userRes.json();
          const currentUserId = user.id;

          // 获取时间线
          const timelineRes = await fetch(`${MISSKEY_INSTANCE}/api/users/notes`, {
            method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId: USER_ID, limit: LIMIT, withReplies: true })
          });
          const notes = await timelineRes.json();

          const filteredNotes = notes.filter((note) => !note.replyId || note.userId !== currentUserId);
          container.innerHTML = '';
          if (!filteredNotes.length) {
            container.innerHTML = '<div class="no-posts">暂无内容</div>';
            return;
          }

          for (const note of filteredNotes) {
            const postCard = document.createElement('div');
            // 卡片设为相对定位并预留底部空间
            postCard.className = 'relative rounded-xl bg-white p-5 border border-gray-100 shadow-sm transition hover:-translate-y-0.5 hover:shadow-md pb-10';
            const formattedTime = formatDate(note.createdAt);
            const isOwnPost = note.userId === currentUserId;
            const noteUrl = getNoteDetailUrl(MISSKEY_INSTANCE, note.id);
            const quotedHtml = note.renoteId && note.renoteId !== note.id ? await renderQuotedNote(MISSKEY_INSTANCE, note.renoteId) : '';

            // 头部仅保留时间，将“详情”移动到底部右侧
            postCard.innerHTML = `
              <div class="post-header">
                <img src="${absUrl(MISSKEY_INSTANCE, note.user?.avatarUrl || user.avatarUrl)}" class="avatar" alt="${note.user?.name || user.name}的头像" loading="lazy" />
                <span class="author-name">
                  <a href="${absUrl(MISSKEY_INSTANCE, `/@${note.user?.username || user.username}`)}" target="_blank" rel="noopener noreferrer">
                    ${note.user?.name || note.user?.username || user.name}
                  </a>
                </span>
                <div class="header-actions">
                  <span class="post-time"><a href="${noteUrl}" target="_blank" rel="noopener noreferrer">${formattedTime}</a></span>
                </div>
              </div>
              <div class="post-content">${note.text || ''}</div>
              ${quotedHtml}
              ${note.files && note.files.length > 0 ? `
                <div class="post-media">
                  <a href="${noteUrl}" target="_blank" rel="noopener noreferrer">
                    <img src="${absUrl(MISSKEY_INSTANCE, note.files[0].url)}" alt="附件图片" loading="lazy" />
                  </a>
                </div>` : ''}
              <div class="replies" data-note-id="${note.id}"></div>
              <div class="card-actions">
                <a href="${noteUrl}" target="_blank" rel="noopener noreferrer" class="action-link view-detail">
                  <svg class="icon-detail" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                    <circle cx="11" cy="11" r="7"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  </svg>
                  详情
                </a>
              </div>
            `;

            const repliesWrap = postCard.querySelector('.replies');
            if (isOwnPost && repliesWrap) {
              const replies = await fetchReplies(MISSKEY_INSTANCE, note.id, 5);
              if (Array.isArray(replies) && replies.length > 0) {
                const replyCount = document.createElement('div');
                replyCount.className = 'reply-count';
                replyCount.textContent = `共 ${replies.length} 条回复`;
                repliesWrap.appendChild(replyCount);

                replies.forEach((r) => {
                  const item = document.createElement('div');
                  item.className = 'reply';
                  const replyTime = formatDate(r.createdAt);
                  const rUser = r.user || {};
                  const replyUrl = getNoteDetailUrl(MISSKEY_INSTANCE, r.id);
                  item.innerHTML = `
                    <img src="${absUrl(MISSKEY_INSTANCE, rUser.avatarUrl)}" class="avatar" alt="${rUser.name || rUser.username || '用户'}头像" loading="lazy" />
                    <div class="reply-body">
                      <div class="author-name">
                        <a href="${absUrl(MISSKEY_INSTANCE, `/@${rUser.username || ''}`)}" target="_blank" rel="noopener noreferrer">${rUser.name || rUser.username || '用户'}</a>
                        <span class="post-time" style="margin-left: 8px;"><a href="${replyUrl}" target="_blank" rel="noopener noreferrer">${replyTime}</a></span>
                      </div>
                      <div class="reply-text">${r.text || ''}</div>
                    </div>
                  `;
                  repliesWrap.appendChild(item);
                });
              } else {
                repliesWrap.style.display = 'none';
              }
            } else if (repliesWrap) {
              repliesWrap.style.display = 'none';
            }

            container.appendChild(postCard);
          }
        } catch (err) {
          const msg = (err && typeof err === 'object' && 'message' in err) ? err.message : String(err);
          container.innerHTML = `<div class="error">加载失败: ${msg}</div>`;
          console.error('获取Misskey数据失败:', err);
        }
      };

      // 首次加载与 Astro 客户端导航
      const run = () => initTimeline();
      if (document.readyState !== 'loading') {
        run();
      } else {
        window.addEventListener('DOMContentLoaded', run, { once: true });
      }
      document.addEventListener('astro:page-load', run);
      document.addEventListener('astro:after-swap', run);
    </script>

    <style is:global>
        .misskey-timeline { 
            max-width: 1000px;
            margin: 0 auto; 
            padding: 20px; 
        }

        /* 统一到归档页样式的标题区块 */
        .archive-header {
            text-align: center;
            margin-bottom: 3rem;
            padding-bottom: 1.5rem;
            border-bottom: 2px solid var(--line-divider);
            width: 100%;
        }
        .archive-title {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            line-height: 1;
        }
        .archive-subtitle {
            color: var(--text-secondary);
            font-size: 1.125rem;
            margin: 0;
        }

        .timeline-container { 
            display: grid; 
            gap: 24px; 
        }

        .post-card { 
            background: white; 
            border-radius: 12px; 
            padding: 20px; 
            box-shadow: 0 2px 12px rgba(0,0,0,0.04); 
            border: 1px solid #f0f0f0;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            /* 确保卡片作为定位容器 */
            position: relative;
            /* 为底部操作区预留空间 */
            padding-bottom: 40px;
        }

        .post-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.06);
        }

        .post-header { 
            display: flex; 
            align-items: center; 
            gap: 12px; 
            margin-bottom: 16px; 
        }

        .header-actions {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .avatar { 
            display: block; 
            width: 44px; 
            height: 44px; 
            flex: 0 0 44px; 
            border-radius: 50%; 
            object-fit: cover; 
            border: 1px solid #f0f0f0;
        }

        .author-name { 
            font-weight: 600; 
            color: #2d3748; 
            font-size: 1rem;
        }

        .author-name a, .post-time a {
            color: inherit;
            text-decoration: none;
        }

        .author-name a:hover, .post-time a:hover {
            text-decoration: underline;
        }

        .post-time { 
            color: #9ca3af; 
            font-size: 0.85rem; 
        }

        .post-content { 
            color: #4a5568; 
            line-height: 1.7; 
            margin-bottom: 16px;
            font-size: 1rem;
            padding: 0 3rem;
        }

        /* 帖子引用样式 */
        .quoted-note {
            margin: 12px 0;
            padding: 12px;
            background-color: #f9fafb;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
            font-size: 0.95rem;
        }

        .quoted-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }

        .quoted-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            object-fit: cover;
        }

        .quoted-author-info {
            flex: 1;
        }

        .quoted-author {
            font-weight: 600;
            color: #2d3748;
            font-size: 0.9rem;
        }

        .quoted-time {
            color: #9ca3af;
            font-size: 0.8rem;
            margin-left: 8px;
        }

        .quoted-content {
            color: #4b5563;
            line-height: 1.5;
            margin-bottom: 8px;
            font-size: 0.9rem;
        }

        .quoted-media {
            margin: 8px 0;
            border-radius: 4px;
            overflow: hidden;
            max-width: 300px;
        }

        .quoted-media img {
            width: 100%;
            height: auto;
            object-fit: cover;
        }

        .quoted-link {
            display: inline-block;
            color: #3b82f6;
            font-size: 0.85rem;
            text-decoration: none;
        }

        .quoted-link:hover {
            text-decoration: underline;
        }

        /* 图片样式 */
        .post-media {
          margin: 16px auto;
          border-radius: 8px;
          overflow: hidden;
          width: clamp(280px, 80%, 720px);
          max-width: 100%;
          box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }
        
        .post-media img {
          display: block;
          width: 100%;
          height: auto;
          max-height: 420px;
          margin: 0 auto;
          object-fit: contain;
          transition: transform 0.3s ease;
        }
        
        .post-media:hover img {
            transform: scale(1.01);
        }

        /* 操作按钮样式 - 重点修改部分 */
        .card-actions {
            /* 关键：固定在卡片右下角 */
            position: absolute;
            bottom: 16px;
            right: 16px;
        }

        .action-link {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            color: #3b82f6;
            font-size: 0.9rem;
            background: none;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
        }

        .action-link:hover {
            background-color: #eff6ff;
        }

        /* 回复样式 */
        .replies { 
            margin-top: 16px; 
            padding-top: 16px; 
            border-top: 1px dashed #e5e7eb; 
            padding-left: 3rem;
            /* 确保回复区域不会被固定定位的按钮覆盖 */
            margin-bottom: 24px;
        }
        
        .reply-count {
            color: #6b7280;
            font-size: 0.9rem;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .reply { 
            display: flex; 
            gap: 10px; 
            padding: 10px 0; 
        }

        .reply .avatar { 
            width: 32px; 
            height: 32px; 
            flex: 0 0 32px; 
        }

        .reply-body { 
            flex: 1; 
            padding-left: 10px;
        }

        .reply-text { 
            color: #4a5568;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        /* 加载状态 */
        .loading { 
            text-align: center; 
            padding: 60px 20px; 
            color: #666; 
        }

        .spinner {
            width: 40px;
            height: 40px;
            margin: 0 auto 16px;
            border: 3px solid #f0f0f0;
            border-top: 3px solid #6b7280;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* 现在已使用 Tailwind，建议删除整个样式块；若需保留仅保留这个无依赖动画 */
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        </style>
</MainLayout>
