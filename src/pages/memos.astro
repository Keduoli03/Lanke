---
import MainLayout from '../layouts/MainLayout.astro';

const title = 'Misskey 动态';
---
<MainLayout title={title}>
    <div class="misskey-timeline">
        <header class="archive-header">
            <h1 class="archive-title">我的动态</h1>
            <p class="archive-subtitle">点击详情可跳转到 Misskey</p>
        </header>
        
        <div id="timeline-container" class="timeline-container">
            <!-- 加载状态 -->
            <div class="loading">
                <div class="spinner"></div>
                <p>加载中...</p>
            </div>
        </div>
    </div>

    <script>
        const MISSKEY_INSTANCE = 'https://memo.blueke.top';
        const USER_ID = 'adfztpsih1jc0003';
        const LIMIT = 20;

        // Misskey 类型
        interface MisskeyUser {
            id: string;
            username?: string;
            name?: string;
            avatarUrl?: string;
        }
        interface MisskeyFile { url: string }
        interface MisskeyNote {
            id: string;
            userId: string;
            createdAt: string;
            text?: string;
            files?: MisskeyFile[];
            renoteId?: string;
            replyId?: string;
            user?: MisskeyUser;
        }

        // 工具函数：获取完整URL（支持空值）
        const absUrl = (p: string | null | undefined): string => {
            if (!p) return '';
            try { return new URL(p, MISSKEY_INSTANCE).href; } catch { return p; }
        };
        
        // 工具函数：格式化日期（显式类型 + getTime）
        function formatDate(dateString: string): string {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs: number = now.getTime() - date.getTime();
            const diffDays: number = Math.floor(diffMs / (1000 * 60 * 60 * 24));
            const pad = (num: number) => num.toString().padStart(2, '0');

            if (diffDays === 0) return `今天 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
            if (diffDays === 1) return `昨天 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
            if (diffDays < 365) return `${pad(date.getMonth() + 1)}月${pad(date.getDate())}日 ${pad(date.getHours())}:${pad(date.getMinutes())}`;
            return `${date.getFullYear()}年${pad(date.getMonth() + 1)}月${pad(date.getDate())}日`;
        }

        function getNoteDetailUrl(noteId: string): string {
            return `${MISSKEY_INSTANCE}/notes/${noteId}`;
        }

        async function fetchReplies(noteId: string, limit: number = 5): Promise<MisskeyNote[]> {
            try {
                const res = await fetch(`${MISSKEY_INSTANCE}/api/notes/children`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ noteId, limit })
                });
                if (!res.ok) return [];
                return await res.json();
            } catch (err) {
                console.error('获取回复失败:', err);
                return [];
            }
        }

        async function fetchQuotedNote(noteId: string): Promise<MisskeyNote | null> {
            try {
                const res = await fetch(`${MISSKEY_INSTANCE}/api/notes/show`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ noteId })
                });
                if (!res.ok) return null;
                return await res.json();
            } catch (err) {
                console.error('获取引用帖子失败:', err);
                return null;
            }
        }

        async function renderQuotedNote(quotedNoteId: string | undefined): Promise<string> {
            if (!quotedNoteId) return '';
            const quotedNote = await fetchQuotedNote(quotedNoteId);
            if (!quotedNote) return '';
            const quotedUrl = getNoteDetailUrl(quotedNoteId);
            const quotedTime = formatDate(quotedNote.createdAt);
            
            return `
                <div class="quoted-note">
                    <div class="quoted-header">
                        <img src="${absUrl(quotedNote.user?.avatarUrl)}" class="quoted-avatar" 
                             alt="${quotedNote.user?.name}的头像" loading="lazy" />
                        <div class="quoted-author-info">
                            <span class="quoted-author">${quotedNote.user?.name || quotedNote.user?.username}</span>
                            <span class="quoted-time">${quotedTime}</span>
                        </div>
                    </div>
                    <div class="quoted-content">${quotedNote.text || '[无内容]'}</div>
                    ${quotedNote.files && quotedNote.files.length > 0 ? 
                        `<div class="quoted-media">
                            <img src="${absUrl(quotedNote.files[0].url)}" alt="引用内容图片" loading="lazy" />
                        </div>` : ''
                    }
                    <a href="${quotedUrl}" target="_blank" class="quoted-link" rel="noopener noreferrer">
                        查看原文
                    </a>
                </div>
            `;
        }

        // 主函数：获取并渲染时间线（保留现有实现）
        async function fetchMisskeyTimeline(): Promise<void> {
            const container = document.getElementById('timeline-container') as HTMLDivElement | null;
            if (!container) return;

            // 初始加载态
            container.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>加载中...</p>
                </div>
            `;

            try {
                const userRes = await fetch(`${MISSKEY_INSTANCE}/api/users/show`, {
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' }, 
                    body: JSON.stringify({ userId: USER_ID })
                });
                const user: MisskeyUser = await userRes.json();
                const currentUserId: string = user.id;

                const timelineRes = await fetch(`${MISSKEY_INSTANCE}/api/users/notes`, {
                    method: 'POST', 
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: USER_ID, limit: LIMIT, withReplies: true })
                });
                const notes: MisskeyNote[] = await timelineRes.json();

                const filteredNotes: MisskeyNote[] = notes.filter((note: MisskeyNote) => {
                    if (!note.replyId) return true;
                    return note.userId !== currentUserId;
                });

                container.innerHTML = '';
                if (filteredNotes.length === 0) {
                    container.innerHTML = '<div class="no-posts">暂无内容</div>';
                    return;
                }

                for (const note of filteredNotes) {
                    const postCard = document.createElement('div');
                    postCard.className = 'post-card';
                    const formattedTime = formatDate(note.createdAt);
                    const isOwnPost = note.userId === currentUserId;
                    const noteUrl = getNoteDetailUrl(note.id);

                    const quotedHtml = note.renoteId && note.renoteId !== note.id 
                        ? await renderQuotedNote(note.renoteId) 
                        : '';

                    postCard.innerHTML = `
                        <div class="post-header">
                            <img src="${absUrl(note.user?.avatarUrl || user.avatarUrl)}" class="avatar" 
                                 alt="${note.user?.name || user.name}的头像" loading="lazy" />
                            <span class="author-name">
                                <a href="${absUrl(`/@${note.user?.username || user.username}`)}" target="_blank" rel="noopener noreferrer">
                                    ${note.user?.name || note.user?.username || user.name}
                                </a>
                            </span>
                            <div class="header-actions">
                                <span class="post-time">
                                    <a href="${noteUrl}" target="_blank" rel="noopener noreferrer">
                                        ${formattedTime}
                                    </a>
                                </span>
                                <a href="${noteUrl}" target="_blank" rel="noopener noreferrer" class="action-link view-detail">
                                    <i class="icon-detail"></i> 详情
                                </a>
                            </div>
                        </div>
                        <div class="post-content">${note.text || ''}</div>
                        ${quotedHtml}
                        ${note.files && note.files.length > 0 ? 
                            `<div class="post-media">
                                <a href="${noteUrl}" target="_blank" rel="noopener noreferrer">
                                    <img src="${absUrl(note.files[0].url)}" alt="附件图片" loading="lazy" />
                                </a>
                            </div>` : ''
                        }
                        <div class="replies" data-note-id="${note.id}"></div>
                    `;

                    const repliesWrap = postCard.querySelector<HTMLDivElement>('.replies');
                    if (isOwnPost && repliesWrap) {
                        const replies: MisskeyNote[] = await fetchReplies(note.id, 5);
                        if (Array.isArray(replies) && replies.length > 0) {
                            const replyCount = document.createElement('div');
                            replyCount.className = 'reply-count';
                            replyCount.textContent = `共 ${replies.length} 条回复`;
                            repliesWrap.appendChild(replyCount);

                            replies.forEach((r: MisskeyNote) => {
                                const item = document.createElement('div');
                                item.className = 'reply';
                                const replyTime = formatDate(r.createdAt);
                                const rUser = r.user || {} as MisskeyUser;
                                const replyUrl = getNoteDetailUrl(r.id);
                                item.innerHTML = `
                                    <img src="${absUrl(rUser.avatarUrl)}" class="avatar" alt="${rUser.name || rUser.username || '用户'}头像" loading="lazy" />
                                    <div class="reply-body">
                                        <div class="author-name">
                                            <a href="${absUrl(`/@${rUser.username}`)}" target="_blank" rel="noopener noreferrer">
                                                ${rUser.name || rUser.username || '用户'}
                                            </a>
                                            <span class="post-time" style="margin-left: 8px;">
                                                <a href="${replyUrl}" target="_blank" rel="noopener noreferrer">
                                                    ${replyTime}
                                                </a>
                                            </span>
                                        </div>
                                        <div class="reply-text">${r.text || ''}</div>
                                    </div>
                                `;
                                repliesWrap.appendChild(item);
                            });
                        } else {
                            repliesWrap.style.display = 'none';
                        }
                    } else if (repliesWrap) {
                        repliesWrap.style.display = 'none';
                    }

                    container.appendChild(postCard);
                }
            } catch (err) {
                const msg = (err && typeof err === 'object' && 'message' in err) ? (err as any).message : String(err);
                container.innerHTML = `<div class="error">加载失败: ${msg}</div>`;
                console.error('获取Misskey数据失败:', err);
            }
        }

        // 统一初始化：页面加载与视图交换都触发，但同一页面只执行一次
        function initTimeline(): void {
            const container = document.getElementById('timeline-container') as HTMLDivElement | null;
            if (!container) return;
            if (container.dataset.init === '1') return; // 已初始化，避免重复
            container.dataset.init = '1';
            fetchMisskeyTimeline();
        }

        // 首次进入页面（直接加载或 SSR 渲染后）
        if (document.readyState !== 'loading') {
            initTimeline();
        } else {
            window.addEventListener('DOMContentLoaded', initTimeline, { once: true });
        }

        // Astro 客户端导航事件：进入页面后触发
        document.addEventListener('astro:page-load', initTimeline);
        // Astro 视图过渡：DOM 交换完成后触发
        document.addEventListener('astro:after-swap', initTimeline);

        // 如之前有 didLoad/dataset.loaded/pageshow 的旧逻辑，请移除，避免相互干扰
    </script>
</MainLayout>



<style is:global>
        .misskey-timeline { 
            max-width: 1000px;
            margin: 0 auto; 
            padding: 20px; 
        }

        /* 统一到归档页样式的标题区块 */
        .archive-header {
            text-align: center;
            margin-bottom: 3rem;
            padding-bottom: 1.5rem;
            border-bottom: 2px solid var(--line-divider);
            width: 100%;
        }
        .archive-title {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            line-height: 1;
        }
        .archive-subtitle {
            color: var(--text-secondary);
            font-size: 1.125rem;
            margin: 0;
        }

        /* 原 section-header 可移除或保留不使用 */
        .section-header {
            display: none;
        }

        .section-header {
            margin-bottom: 24px;
            padding-bottom: 12px;
            border-bottom: 1px solid #f0f0f0;
        }

        .section-header h2 {
            margin: 0 0 8px 0;
            color: #2d3748;
            font-size: 1.5rem;
        }

        .filter-info { 
            color: #666; 
            font-size: 0.9rem; 
        }

        .timeline-container { 
            display: grid; 
            gap: 24px; 
        }

        .post-card { 
            background: white; 
            border-radius: 12px; 
            padding: 20px; 
            box-shadow: 0 2px 12px rgba(0,0,0,0.04); 
            border: 1px solid #f0f0f0;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .post-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.06);
        }

        .post-header { 
            display: flex; 
            align-items: center; 
            gap: 12px; 
            margin-bottom: 16px; 
        }

        .header-actions {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .avatar { 
            display: block; 
            width: 44px; 
            height: 44px; 
            flex: 0 0 44px; 
            border-radius: 50%; 
            object-fit: cover; 
            border: 1px solid #f0f0f0;
        }

        .author-name { 
            font-weight: 600; 
            color: #2d3748; 
            font-size: 1rem;
        }

        .author-name a, .post-time a {
            color: inherit;
            text-decoration: none;
        }

        .author-name a:hover, .post-time a:hover {
            text-decoration: underline;
        }

        .post-time { 
            color: #9ca3af; 
            font-size: 0.85rem; 
        }

        .post-content { 
            color: #4a5568; 
            line-height: 1.7; 
            margin-bottom: 16px;
            font-size: 1rem;
            padding: 0 3rem;
        }

        /* 帖子引用样式 */
        .quoted-note {
            margin: 12px 0;
            padding: 12px;
            background-color: #f9fafb;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
            font-size: 0.95rem;
        }

        .quoted-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }

        .quoted-avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            object-fit: cover;
        }

        .quoted-author-info {
            flex: 1;
        }

        .quoted-author {
            font-weight: 600;
            color: #2d3748;
            font-size: 0.9rem;
        }

        .quoted-time {
            color: #9ca3af;
            font-size: 0.8rem;
            margin-left: 8px;
        }

        .quoted-content {
            color: #4b5563;
            line-height: 1.5;
            margin-bottom: 8px;
            font-size: 0.9rem;
        }

        .quoted-media {
            margin: 8px 0;
            border-radius: 4px;
            overflow: hidden;
            max-width: 300px;
        }

        .quoted-media img {
            width: 100%;
            height: auto;
            object-fit: cover;
        }

        .quoted-link {
            display: inline-block;
            color: #3b82f6;
            font-size: 0.85rem;
            text-decoration: none;
        }

        .quoted-link:hover {
            text-decoration: underline;
        }

        /* 图片样式 */
        .post-media {
          margin: 16px auto;
          border-radius: 8px;
          overflow: hidden;
          width: clamp(280px, 80%, 720px);
          max-width: 100%;
          box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }
        
        .post-media img {
          display: block;
          width: 100%;
          height: auto;
          max-height: 420px;
          margin: 0 auto;
          object-fit: contain;
          transition: transform 0.3s ease;
        }
        
        .post-media:hover img {
            transform: scale(1.01);
        }

        /* 操作按钮样式 */
        .action-link {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            color: #3b82f6;
            font-size: 0.9rem;
            background: none;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
        }

        .action-link:hover {
            background-color: #eff6ff;
        }

        .icon-detail::before {
            content: '🔍';
        }

        /* 回复样式 */
        .replies { 
            margin-top: 16px; 
            padding-top: 16px; 
            border-top: 1px dashed #e5e7eb; 
            padding-left: 3rem;
        }
        
        .reply-count {
            color: #6b7280;
            font-size: 0.9rem;
            margin-bottom: 12px;
            font-weight: 500;
        }

        .reply { 
            display: flex; 
            gap: 10px; 
            padding: 10px 0; 
        }

        .reply .avatar { 
            width: 32px; 
            height: 32px; 
            flex: 0 0 32px; 
        }

        .reply-body { 
            flex: 1; 
            padding-left: 10px;
        }

        .reply-text { 
            color: #4a5568;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        /* 加载状态 */
        .loading { 
            text-align: center; 
            padding: 60px 20px; 
            color: #666; 
        }

        .spinner {
            width: 40px;
            height: 40px;
            margin: 0 auto 16px;
            border: 3px solid #f0f0f0;
            border-top: 3px solid #6b7280;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .error { 
            text-align: center; 
            padding: 60px 20px; 
            color: #dc3545; 
            background-color: #fef2f2;
            border-radius: 8px;
        }

        .no-posts { 
            text-align: center; 
            padding: 60px 20px; 
            color: #666; 
            background-color: #f9fafb;
            border-radius: 8px;
        }

        /* 响应式调整 */
        @media (max-width: 768px) {
            .misskey-timeline {
                padding: 12px;
            }
            
            .post-card {
                padding: 16px;
            }
            
            .post-content, .replies {
                padding-left: 1rem;
                padding-right: 1rem;
            }
            
            .post-content {
                font-size: 0.95rem;
            }
            
            .post-media {
                width: 100%;
            }
            
            .post-media img {
                max-height: 320px;
            }
            
            .header-actions {
                gap: 8px;
            }
            
            .action-link {
                font-size: 0.85rem;
                padding: 2px 6px;
            }
        }
    </style>
