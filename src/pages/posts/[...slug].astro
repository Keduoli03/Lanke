---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import { Image } from 'astro:assets';
import MainLayout from '../../layouts/MainLayout.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Footer from '../../components/Footer.astro';
import PostPage from '../../components/post/PostPage.astro';
import { SITE_TITLE } from '../../config';

export async function getStaticPaths() {
	const posts = await getCollection('posts');
	
	// 添加列表页面路径
	const paths: Array<{
		params: { slug: string | undefined };
		props: { posts?: CollectionEntry<'posts'>[]; entry?: CollectionEntry<'posts'> };
	}> = [
		{
			params: { slug: undefined }, // 列表页面
			props: { posts: posts.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf()) }
		}
	];
	
	// 添加单篇文章路径
	posts.forEach(post => {
		paths.push({
			params: { slug: post.data.slug },
			props: { entry: post }
		});
	});
	
	return paths;
}

type Props = {
	entry?: CollectionEntry<'posts'>;
	posts?: CollectionEntry<'posts'>[];
};

const { entry, posts } = Astro.props as Props;
const isListPage = !entry && posts;

// 如果是单篇文章，渲染内容
let Content: any;
if (entry) {
	const rendered = await render(entry);
	Content = rendered.Content;
}
---
{isListPage ? (
  // 文章列表页面
  <MainLayout title={SITE_TITLE} description="所有文章列表">
    <PostPage posts={posts!} showTitle={true} title="所有文章" />
  </MainLayout>
) : (
  // 单篇文章页面
  <MainLayout title={entry!.data.title} description={entry!.data.description || entry!.data.title}> {/* 注意这里补充了 MainLayout 的闭合 */}
    <article class="max-w-4xl mx-auto px-6 py-8">
      {entry!.data.cover && (
        <div class="hero-image mb-8">
          <Image 
            width={1020} 
            height={510} 
            src={entry!.data.cover} 
            alt={entry!.data.title}
            class="w-full h-auto rounded-lg shadow-lg"
          />
        </div>
      )}
      
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{entry!.data.title}</h1>
        <div class="text-gray-600 dark:text-gray-400 mb-4">
          <FormattedDate date={entry!.data.date} />
          {entry!.data.updated && (
            <span class="ml-4">
              最后更新: <FormattedDate date={entry!.data.updated} />
            </span>
          )}
        </div>
        
        {/* 分类和标签 */}
        <div class="flex flex-wrap gap-2 mb-4">
          {entry!.data.categories && entry!.data.categories.map(category => (
            <span class="bg-blue-100 text-blue-800 text-sm px-3 py-1 rounded-full">
              {category}
            </span>
          ))}
          {entry!.data.tags && entry!.data.tags.map(tag => (
            <span class="bg-gray-100 text-gray-800 text-sm px-3 py-1 rounded-full">
              #{tag}
            </span>
          ))}
        </div>
        
        {entry!.data.pinned && (
          <div class="bg-yellow-100 text-yellow-800 text-sm px-3 py-1 rounded-full inline-block mb-4">
            📌 置顶文章
          </div>
        )}
      </header>
      
      <div class="prose prose-lg max-w-none dark:prose-invert">
        <Content />
      </div>
    </article>
    <Footer />
  </MainLayout> 
)}