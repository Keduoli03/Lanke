---
import { getAllTags } from '../../utils/content-utils';
import { Icon } from 'astro-icon/components';

interface Props {
  class?: string;
}

const { class: className } = Astro.props;
const tags = await getAllTags();

// 计算标签大小权重
const maxCount = Math.max(...tags.map(tag => tag.count));
const minCount = Math.min(...tags.map(tag => tag.count));
const getTagSize = (count: number) => {
  if (maxCount === minCount) return 'medium';
  const ratio = (count - minCount) / (maxCount - minCount);
  if (ratio > 0.7) return 'large';
  if (ratio > 0.4) return 'medium';
  return 'small';
};

const tagsWithSize = tags.map(tag => ({
  name: tag.name,
  count: tag.count,
  size: getTagSize(tag.count),
}));
---

<div class:list={["tag-cloud-container", className]}>
  <div class="widget-header">
    <div class="widget-header-left">
      <Icon name="material-symbols:label-outline" class="widget-icon" />
      <h3 class="widget-title">标签云</h3>
      <button class="refresh-btn" title="换一批">
        <Icon name="material-symbols:refresh" class="refresh-icon" />
      </button>
    </div>
    <div class="widget-header-right">
      <span class="widget-count">{tags.length}</span>
      <button class="expand-btn" data-expanded="false">
        <Icon name="material-symbols:expand-more" class="expand-icon" />
      </button>
    </div>
  </div>
  
  <!-- 默认的动画预览区域 -->
  <div class="tag-preview">
    <div class="floating-tags">
      {/* Client-side script will inject tags here */}
    </div>
  </div>
  
  <!-- 完整的标签列表 -->
  <div class="tag-cloud" data-expanded="false">
    {tags.map(tag => (
      <a 
        href={`/tags/${encodeURIComponent(tag.name)}/`}
        class={`tag-item tag-${getTagSize(tag.count)}`}
        title={`${tag.name} (${tag.count} 篇文章)`}
      >
        <span class="tag-hash">#</span>
        <span class="tag-name">{tag.name}</span>
        <span class="tag-count">{tag.count}</span>
      </a>
    ))}
  </div>
</div>

<script define:vars={{ allTags: tagsWithSize }}>
  function generateAndLayoutTags(container) {
    const floatingTagsContainer = container.querySelector('.floating-tags');
    if (!floatingTagsContainer) return;

    // 1. Shuffle and select tags
    const shuffled = [...allTags].sort(() => 0.5 - Math.random());
    const displayCount = 8;
    const selectedTags = shuffled.slice(0, Math.min(allTags.length, displayCount));

    // 2. Generate HTML and inject it
    floatingTagsContainer.innerHTML = selectedTags.map((tag, index) => `
      <a 
        href="/tags/${encodeURIComponent(tag.name)}/"
        class="floating-tag tag-${tag.size}"
        style="animation-delay: ${index * 1.2}s;"
        title="查看 ${tag.name} 标签下的所有文章 (${tag.count} 篇)"
      >
        #${tag.name}
      </a>
    `).join('');

    // 3. Defer layout calculation until after the DOM has updated
    requestAnimationFrame(() => {
      layoutFloatingTags(floatingTagsContainer);
    });
  }

  function layoutFloatingTags(container) {
    if (!container) return;

    const tags = Array.from(container.querySelectorAll('.floating-tag'));
    if (tags.length === 0) return;

    // Ensure container has dimensions before calculating positions
    if (container.clientWidth === 0 || container.clientHeight === 0) {
      requestAnimationFrame(() => layoutFloatingTags(container));
      return;
    }

    const containerRect = container.getBoundingClientRect();
    const positionedElements = [];

    const doOverlap = (elem1, elem2) => {
      const r1 = elem1.rect;
      const r2 = elem2.rect;
      const margin = 8; // px, minimum space between tags
      return !(r1.right + margin < r2.left ||
              r1.left - margin > r2.right ||
              r1.bottom + margin < r2.top ||
              r1.top - margin > r2.bottom);
    };

    tags.forEach(tag => {
      const tagEl = tag;
      const tagRect = tagEl.getBoundingClientRect();
      const tagWidth = tagRect.width;
      const tagHeight = tagRect.height;

      if (tagWidth === 0 || tagHeight === 0) return; // Skip invisible tags

      let attempts = 0;
      let hasOverlap = false;
      let newElement;

      do {
        const left = Math.random() * (containerRect.width - tagWidth);
        const top = Math.random() * (containerRect.height - tagHeight);
        
        newElement = {
          rect: {
            left: left,
            top: top,
            right: left + tagWidth,
            bottom: top + tagHeight,
          }
        };

        hasOverlap = false;
        for (const placed of positionedElements) {
          if (doOverlap(newElement, placed)) {
            hasOverlap = true;
            break;
          }
        }
        attempts++;
      } while (hasOverlap && attempts < 150);

      if (!hasOverlap) {
        const finalLeft = newElement.rect.left + tagWidth / 2;
        const finalTop = newElement.rect.top + tagHeight / 2;

        tagEl.style.left = `${(finalLeft / containerRect.width) * 100}%`;
        tagEl.style.top = `${(finalTop / containerRect.height) * 100}%`;
        
        const centerX = finalLeft;
        const centerY = finalTop;
        newElement.rect = {
          left: centerX - tagWidth / 2,
          top: centerY - tagHeight / 2,
          right: centerX + tagWidth / 2,
          bottom: centerY + tagHeight / 2,
        };
        
        positionedElements.push(newElement);
      } else {
        tagEl.style.opacity = '0';
        tagEl.style.animation = 'none';
        tagEl.style.display = 'none';
      }
    });
  }

  function initializeWidgets() {
    document.querySelectorAll('.tag-cloud-container').forEach(container => {
      
      generateAndLayoutTags(container);

      const expandBtn = container.querySelector('.expand-btn');
      const tagCloud = container.querySelector('.tag-cloud');
      const tagPreview = container.querySelector('.tag-preview');
      const expandIcon = container.querySelector('.expand-icon');
      
      if (expandBtn && tagCloud && tagPreview && expandIcon) {
        const existingHandler = expandBtn._tagCloudToggleHandler;
        if (existingHandler) {
          expandBtn.removeEventListener('click', existingHandler);
        }
        
        const clickHandler = () => {
          const isExpanded = expandBtn.getAttribute('data-expanded') === 'true';
          const newExpanded = !isExpanded;
          
          expandBtn.setAttribute('data-expanded', newExpanded.toString());
          tagCloud.setAttribute('data-expanded', newExpanded.toString());
          
          if (newExpanded) {
            tagPreview.style.display = 'none';
            tagCloud.style.display = 'flex';
            expandIcon.style.transform = 'rotate(180deg)';
          } else {
            tagPreview.style.display = 'block';
            tagCloud.style.display = 'none';
            expandIcon.style.transform = 'rotate(0deg)';
          }
        };
        
        expandBtn._tagCloudToggleHandler = clickHandler;
        expandBtn.addEventListener('click', clickHandler);
      }

      const refreshBtn = container.querySelector('.refresh-btn');
      if (refreshBtn) {
        const existingHandler = refreshBtn._tagCloudRefreshHandler;
        if (existingHandler) {
          refreshBtn.removeEventListener('click', existingHandler);
        }
        const refreshHandler = () => generateAndLayoutTags(container);
        refreshBtn._tagCloudRefreshHandler = refreshHandler;
        refreshBtn.addEventListener('click', refreshHandler);
      }
    });
  }
  
  document.addEventListener('astro:page-load', initializeWidgets);
</script>

<style>
  .tag-cloud-container {
    background: var(--content-pane-bg);
    border-radius: 0.875rem;
    padding: 1.5rem;
    box-shadow: 0 2px 8px 0 rgb(0 0 0 / 0.1);
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    min-height: 200px;
  }
  
  
  .widget-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem; 
    margin-bottom: 1.25rem;
    padding-bottom: 0.875rem;
    border-bottom: 1px solid var(--border-color);
  }

  .widget-header-left {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .widget-header-right {
    display: flex;
    align-items: center;
    gap: 0.5rem; 
  }
  
  .widget-icon {
    width: 1.25rem;
    height: 1.25rem;
    color: var(--theme-color);
    flex-shrink: 0;
  }
  
  .widget-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    letter-spacing: -0.025em;
  }
  
  .widget-count {
    background: var(--tag-bg);
    color: var(--text-on-theme);
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 9999px;
    font-weight: 600;
    box-shadow: 0 3px 8px -2px color-mix(in srgb, var(--theme-color) 30%, transparent);
    border: 1px solid color-mix(in srgb, var(--theme-color) 10%, transparent);
    transition: all 0.3s ease;
  }
  
  .refresh-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .refresh-btn:hover {
    color: var(--theme-color);
    background: var(--hover-bg);
    box-shadow: 0 0 12px 0 color-mix(in srgb, var(--theme-color) 40%, transparent);
  }

  .refresh-icon {
    width: 1.125rem;
    height: 1.125rem;
    transition: transform 0.5s ease;
  }

  .refresh-btn:hover .refresh-icon {
    transform: rotate(180deg);
  }

  .expand-btn {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
    .expand-btn:hover { 
    color: var(--theme-color); 
    background: var(--sidebar-icon-bg);
    box-shadow: 0 0 12px 0 color-mix(in srgb, var(--theme-color) 40%, transparent);
  } 
  
  .expand-icon {
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.3s ease;
  }
  
  /* 标签预览区域 */
  .tag-preview {
    position: relative;
    height: 180px; 
    background: linear-gradient(135deg, var(--tag-bg, #f8fafc), var(--hover-bg, #f1f5f9));
    border-radius: 0.75rem;
    overflow: hidden;
    border: 1px solid var(--border-color);
  }
  
  .floating-tags {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  :global(.floating-tag) {
    position: absolute;
    padding: 0.5rem 1rem;
    background: color-mix(in srgb, var(--theme-color) 85%, transparent);
    color: var(--text-on-theme);
    border-radius: 2rem;
    font-size: 0.875rem;
    font-weight: 500;
    opacity: 0;
    animation: floatAndFade 9.6s infinite;
    box-shadow: 0 8px 25px -8px rgba(var(--theme-color-rgb, 59, 130, 246), 0.4);
    transform: translateX(-50%) translateY(-50%);
    white-space: nowrap;
    z-index: 1;
    max-width: 80%;
    overflow: hidden;
    text-overflow: ellipsis;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    border: none;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
  
  :global(.floating-tag:hover) {
    transform: translateX(-50%) translateY(-50%) scale(1.15) rotate(2deg);
    box-shadow: 0 12px 35px -10px rgba(var(--theme-color-rgb, 59, 130, 246), 0.6);
    z-index: 2;
    background: linear-gradient(135deg, var(--theme-color), var(--theme-color-light, var(--theme-color)));
  }
  
  :global(.floating-tag:active) {
    transform: translateX(-50%) translateY(-50%) scale(1.05);
    transition: all 0.1s ease;
  }
  
  :global(.floating-tag.tag-large) {
    font-size: 1rem;
    font-weight: 600;
    padding: 0.625rem 1.25rem;
  }
  
  :global(.floating-tag.tag-small) {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
  }
  
  @keyframes floatAndFade {
    0%, 85%, 100% {
      opacity: 0;
      transform: translateX(-50%) translateY(-50%) scale(0.8) rotate(-5deg);
    }
    10%, 75% {
      opacity: 1;
      transform: translateX(-50%) translateY(-50%) scale(1) rotate(0deg);
    }
    40% {
      opacity: 1;
      transform: translateX(-50%) translateY(-50%) scale(1.05) rotate(2deg);
    }
  }

  /* 
  完整标签列表
  ===============================
  */
  .tag-cloud {
    display: none; /* 初始折叠隐藏 */
    grid-template-columns: repeat(5, minmax(0, 1fr)); /* 默认最多6列 */
    gap: 0.4rem;
    justify-items: stretch;
    flex-wrap: wrap;
    gap: 0.3rem; /* 缩小间距以容纳更多标签 */
    justify-content: flex-start;
    padding-top: 0.5rem;
    animation: fadeInUp 0.5s ease forwards;
  }

  .tag-cloud[data-expanded="true"] {
    display: flex;
  }

  /* 基础标签样式 (缩小尺寸) */
  .tag-cloud-container .tag-item {
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    background: var(--tag-bg);
    color: var(--text-secondary);
    padding: 0.25rem 0.6rem; /* 缩小内边距 */
    border-radius: 9999px;
    font-size: 0.75rem; /* 缩小字体 */
    font-weight: 500;
    text-decoration: none;
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .tag-cloud-container .tag-item .tag-hash {
    color: var(--theme-color);
    font-weight: 600;
    transition: all 0.25s ease;
    flex: 0 0 auto;
  }

  .tag-cloud-container .tag-item .tag-name {
    color: var(--text-primary);
    transition: color 0.25s ease;
    flex: 1 1 auto;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis; /* 名称太长时省略号 */
  }

  .tag-cloud-container .tag-item.tag-small {
    font-size: 0.7rem;
    padding: 0.2rem 0.5rem;
  }
  
  /* 
  通用标签元素
  ===============================
  */
  .tag-count {
    background: rgba(0, 0, 0, 0.1);
    color: var(--text-secondary);
    font-size: 0.7em;
    padding: 0.15rem 0.35rem;
    border-radius: 9999px;
    font-weight: 600;
    min-width: 1rem;
    text-align: center;
    transition: all 0.3s ease;
  }
  
  /* --- 悬浮效果 --- */
  
  /* 浅色模式悬浮效果 (使用高优先级选择器) */
  .tag-cloud-container .tag-item:hover {
    transform: translateY(-2px) scale(1.02);
    background: linear-gradient(135deg, var(--theme-color), var(--theme-color-secondary, var(--theme-color)));
    color: white; /* 统一设置父元素文字颜色 */
    box-shadow: 0 6px 20px -6px rgba(var(--theme-color-rgb, 59, 130, 246), 0.4);
    border-color: transparent;
  }

  /* 确保所有子元素在悬浮时都继承或明确设置为白色 */
  .tag-cloud-container .tag-item:hover .tag-hash,
  .tag-cloud-container .tag-item:hover .tag-name,
  .tag-cloud-container .tag-item:hover .tag-count {
    color: white;
  }
  
  .tag-cloud-container .tag-item:hover .tag-hash {
    transform: rotate(15deg) scale(1.1);
  }

  .tag-cloud-container .tag-item:hover .tag-count {
    transform: scale(1.05);
    background: rgba(255, 255, 255, 0.25);
  }

  /* 深色模式悬浮效果的覆盖 */
  html.dark .tag-cloud-container .tag-item {
    background: var(--dark-tag-bg, var(--tag-bg));
    border-color: var(--dark-border-color, var(--border-color));
  }

  html.dark .tag-cloud-container .tag-item:hover {
    background: linear-gradient(135deg, rgba(var(--theme-color-rgb), 0.6), rgba(var(--theme-color-rgb), 0.4));
    color: var(--text-primary);
    box-shadow: 0 4px 15px -4px rgba(var(--theme-color-rgb), 0.3);
    border-color: rgba(var(--theme-color-rgb), 0.5);
  }

  html.dark .tag-cloud-container .tag-item:hover .tag-hash {
    color: var(--theme-color);
  }

  html.dark .tag-cloud-container .tag-item:hover .tag-name {
    color: var(--text-primary);
  }

  html.dark .tag-cloud-container .tag-item:hover .tag-count {
    background: rgba(0, 0, 0, 0.25);
    color: var(--text-secondary);
  }
  
  /* 响应式列数：中屏5列，小屏4列 */
  @media (max-width: 1024px) {
    .tag-cloud[data-expanded="true"] {
      grid-template-columns: repeat(5, minmax(0, 1fr));
    }
  }
  @media (max-width: 768px) {
    .tag-cloud-container {
      padding: 1rem;
      min-height: 180px;
    }
    
    .tag-preview {
      height: 120px;
    }
    .tag-cloud[data-expanded="true"] {
      grid-template-columns: repeat(4, minmax(0, 1fr));
      gap: 0.3rem;
    }
    .tag-cloud-container .tag-item {
      font-size: 0.7rem;
      padding: 0.25rem 0.5rem;
    }

    .tag-large {
      font-size: 0.8rem;
      padding: 0.375rem 0.75rem;
    }
  }
  
  /* 深色模式适配 */
  html.dark .tag-preview {
    background: linear-gradient(135deg, var(--dark-tag-bg, #374151), var(--dark-hover-bg, #4b5563));
  }
</style>