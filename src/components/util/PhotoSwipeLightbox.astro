---
interface Props {
  gallerySelector?: string;
  childrenSelector?: string;
}
const { gallerySelector = '.misskey-timeline', childrenSelector = 'a.pswp-link, a.post-image-link' } = Astro.props as Props;
---
<script type="module" define:vars={{ gallerySelector, childrenSelector }}>
  if (!window.PSLightbox) {
    await import('/src/utils/photoswipe-lightbox.ts');
  }

  const container = document.querySelector(gallerySelector);
  if (!container) {
    console.warn('[PSLightbox] 容器未找到:', gallerySelector);
  }

  const initLightbox = () => {
    if (!container) return;
    window.PSLightbox?.destroy?.();
    const newInstance = window.PSLightbox?.create?.({
      gallery: container,
      children: childrenSelector,
      autoPreventDefault: true,
      autoWriteSize: true,
      labels: { close: '关闭' }
    });
    if (!newInstance) {
      console.error('[PSLightbox] 灯箱实例创建失败');
    }
  };

  // 双重保险：点击拦截（安全判断 Element，避免 target.closest 抛错）
  container?.addEventListener('click', (e) => {
    const t = e.target;
    if (!(t instanceof Element)) return;
    const linkElement = t.closest(childrenSelector);
    if (linkElement) {
      e.preventDefault();
      e.stopPropagation();
    }
  }, true);

  const mo = new MutationObserver(() => setTimeout(initLightbox, 50));
  // 启动观察：容器子树变化时重建
  if (container) {
    mo.observe(container, { childList: true, subtree: true });
  }

  document.addEventListener('astro:page-load', () => setTimeout(initLightbox, 50));
  document.addEventListener('astro:after-swap', () => setTimeout(initLightbox, 50));
  // 立即初始化一次，避免首屏不触发
  setTimeout(initLightbox, 50);
</script>
